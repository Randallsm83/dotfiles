#!/bin/bash

# Enable error handling
set -euo pipefail

# Define constants
SSH_DIR="$HOME/.ssh"
SSH_CONFIG_FILE="$SSH_DIR/config"
CURRENT_YEAR=$(date +'%Y') # Current year
NEXT_YEAR=$((CURRENT_YEAR + 1)) # Next year

# Define a mapping of keys to hostnames
declare -A KEY_HOSTNAME_MAP=(
    ["github"]="github.com"
    ["dhgit"]="git.dreamhost.com"
    ["yakko"]="yakko.sd.dreamhost.com"
    ["ldap"]="ldap.dreamhost.com"
)

# Check if a given SSH key exists
check_ssh_key_exists() {
    local key_name="$1"
    if [ -f "$SSH_DIR/$key_name" ]; then
        return 0 # Key exists
    else
        return 1 # Key does not exist
    fi
}

# Function to generate SSH key
generate_ssh_key() {
    local key_name="$1"
    local host_name="${KEY_HOSTNAME_MAP[$key_name]}"
    local comment="${host_name}.${NEXT_YEAR}"

    # Generate SSH key if it does not exist
    if check_ssh_key_exists "$key_name"; then
        echo "SSH key '$key_name' already exists. Skipping key generation."
    else
        echo "Generating SSH key: $key_name"
        ssh-keygen -t ed25519 -f "$SSH_DIR/$key_name" -C "$comment" -N ""
        echo "SSH key '$key_name' created with comment: $comment"
    fi
}

# Function to add SSH key to SSH agent
add_ssh_key_to_agent() {
    local key_path="$1"

    # Check if ssh-agent is already running
    if [[ -z "${SSH_AGENT_PID:-}" ]]; then
        echo "ssh-agent is not running. Starting ssh-agent..."
        eval "$(ssh-agent -s)"
    else
        echo "ssh-agent is already running (PID: $SSH_AGENT_PID)"
    fi

    # Check if the key is already loaded in the agent
    if ssh-add -l | grep -q "$key_path"; then
        echo "SSH key $key_path is already loaded in ssh-agent."
    else
        echo "Adding SSH key $key_path to ssh-agent..."

        if ssh-add "$key_path"; then
            echo "SSH key $key_path added to ssh-agent successfully."
        else
            echo "Failed to add SSH key $key_path to ssh-agent. Please check the key permissions or format."
        fi
    fi
}

# Function to configure SSH config file
configure_ssh_config() {
    echo "Configuring SSH config file at $SSH_CONFIG_FILE"

    # Backup the existing config file if it exists
    if [ -f "$SSH_CONFIG_FILE" ]; then
        cp "$SSH_CONFIG_FILE" "$SSH_CONFIG_FILE.bak"
        echo "Existing SSH config file backed up as $SSH_CONFIG_FILE.bak"
    fi

    # Create a new config file or clear the existing one
    echo "# SSH Config File" > "$SSH_CONFIG_FILE"
    echo "# This file is automatically generated by the install script." >> "$SSH_CONFIG_FILE"
    echo "" >> "$SSH_CONFIG_FILE"

    # Add a global configuration
    cat << EOF >> "$SSH_CONFIG_FILE"
Host *
    AddKeysToAgent yes
    IdentitiesOnly yes
EOF

    # Add individual entries for each key
    for key_name in "${!KEY_HOSTNAME_MAP[@]}"; do
        key_path="$SSH_DIR/$key_name"
        host_name="${KEY_HOSTNAME_MAP[$key_name]}"
        if check_ssh_key_exists "$key_name"; then
            echo "" >> "$SSH_CONFIG_FILE"
            cat << EOF >> "$SSH_CONFIG_FILE"
Host $key_name
    User git
    HostName $host_name
    IdentityFile $key_path
EOF
            echo "Added SSH config entry for $key_name"
        fi
    done

    echo "SSH config file configured successfully."
}

# Function to setup SSH keys
setup_ssh_keys() {
    mkdir -p "$SSH_DIR"
    chmod 700 "$SSH_DIR"

    # Generate SSH keys if needed
    for key_name in "${!KEY_HOSTNAME_MAP[@]}"; do
        generate_ssh_key "$key_name"
        add_ssh_key_to_agent "$SSH_DIR/$key_name"
    done

    # Configure the SSH config file
    configure_ssh_config

    echo "SSH keys and configuration setup completed."
}

# Function to rotate SSH keys
rotate_keys() {
    echo "Rotating SSH keys for: ${!KEY_HOSTNAME_MAP[*]}"
    for key_name in "${!KEY_HOSTNAME_MAP[@]}"; do
        local key_path="$SSH_DIR/$key_name"

        # Delete old keys if they exist
        if check_ssh_key_exists "$key_name"; then
            echo "Deleting old SSH key: $key_name"
            rm -f "$key_path" "$key_path.pub"
        fi

        # Generate a new SSH key
        generate_ssh_key "$key_name"

        # Add the new key to the agent
        add_ssh_key_to_agent "$key_path"
    done

    # Update the SSH config file with new keys
    configure_ssh_config

    # Display new public keys for updating remotes
    display_public_keys
}

# Function to display SSH public keys for manual addition to GitHub or other services
display_public_keys() {
    echo "Public SSH keys for your reference:"
    for key_name in "${!KEY_HOSTNAME_MAP[@]}"; do
        if check_ssh_key_exists "$key_name"; then
            echo "Public key for $key_name:"
            cat "$SSH_DIR/$key_name.pub"
            echo ""
        fi
    done
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script is intended to be sourced, not executed directly."
    echo "Usage: source ./ssh_key_manager.sh"
    echo "Then you can call functions like 'setup_ssh_keys' or 'rotate_keys'."
fi
